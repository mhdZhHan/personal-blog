---
// styles
import "@styles/blog-post.scss"

import {
	getEntryBySlug,
	getCollection,
	type CollectionEntry,
} from "astro:content"
import { Image } from "astro:assets"
// import { db, eq, Like } from "astro:db"

import { Eye, Calendar, Clock4, User } from "lucide-astro"

// layouts
import Layout from "@layouts/Layout.astro"

// components
import TOC from "@components/blog/TOC.astro"
// import LikeBlog from "@components/blog/LikeBlog.astro"
import CodeBlock from "@components/blog/CodeBlock.astro"
import PostComments from "@components/blog/PostComments.astro"
import BlogFooter from "@components/blog/BlogFooter.astro"
import PostPagination from "@components/blog/PostPagination.astro"

// lib
import { simplifyDate } from "@lib/index.js"

type Props = CollectionEntry<"blog">

export async function getStaticPaths() {
	const allPosts = await getCollection("blog")
	return allPosts.map((post) => ({
		params: {
			slug: post.slug,
		},
	}))
}

const { slug } = Astro.params

if (!slug) {
	Astro.redirect("/")
}

const post = await getEntryBySlug("blog", slug!)

if (!post) {
	Astro.redirect("/")
}

const { title, pubDate, image, description } = post!.data

const {
	remarkPluginFrontmatter: extras,
	Content,
	headings,
} = await post!.render()

// TODO Like data of the current post
// const likes = await db.select().from(Like).where(eq(Like.post, slug))
---

<Layout
	title={`Mohammed's blog | ${title}`}
	description={description}
	ogImageUrl={image}
>
	<section id="blog-post" class="post">
		<div class="wrapper">
			<div class="post__head">
				<h1 class="post__title">{title}</h1>
				<div class="post__meta">
					<div class="post__author">
						<User class="shrink-0" size={14} aria-hidden />
						<span>Mohammed</span>
					</div>

					<div class="post__date">
						<Calendar class="shrink-0" size={14} aria-hidden />
						<span>{simplifyDate(pubDate).simplifiedDate}</span>
					</div>

					<div class="post__read">
						<Clock4 class="shrink-0" size={14} aria-hidden />
						<span class="post__read"
							>{extras.readingTime} Min Read</span
						>
					</div>

					<div class="post__Views">
						<Eye class="shrink-0" size={14} aria-hidden />
						<span data-post-views={slug}>000000</span>
					</div>
				</div>

				<!-- {likes && <LikeBlog slug={slug} likes={likes[0]} />} -->
			</div>

			<TOC pageHeadings={headings} />

			<div class="post__body">
				<div class="post__banner">
					<!-- <img src={image} alt={title} loading="lazy" /> -->
					<Image
						src={image as string}
						alt={title}
						width={100}
						height={100}
					/>
				</div>

				<div class="post__content">
					<Content components={{ figure: CodeBlock }} />
				</div>
			</div>

			<div class="post__footer">
				<hr class="hr-line" />
				<BlogFooter />
				<PostPagination {post} />
				<hr class="hr-line" style="margin-bottom: 2.5rem;" />
				<PostComments />
			</div>
		</div>
	</section>
</Layout>

<style lang="scss">
	.post__head {
		.post__title {
			line-height: 2.25rem;
			font-weight: 700;
			text-align: center;
			font-family: "8-bit_bold";

			font-size: 34px;
			@media all and (max-width: 768px) {
				font-size: 24px;
			}
		}
		.post__meta {
			font-size: 0.875rem;
			line-height: 1.25rem;
			color: var(--gray);
			text-align: center;
			margin-top: 1rem;

			display: flex;
			align-items: center;
			justify-content: center;
			flex-wrap: wrap;
			gap: 0.5rem;

			div {
				padding: 0 0.5rem;
				border-radius: 0.25rem;
				border: 1px solid var(--border-color);

				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
			}
		}
	}

	.post__body {
		margin: 1.25rem auto;
		.post__banner {
			margin: 0 auto;
			border-radius: 0.5rem;
			img {
				display: block;
				object-fit: cover;
				width: 100%;
				height: 100%;
				aspect-ratio: 2 / 1;

				border: 1px solid var(--border-color);
				border-radius: 0.5rem;
			}
		}
		.post__content {
			margin-top: 2rem;
			color: var(--text);
		}
	}

	.post__footer {
		margin: 1.25rem auto;
	}
</style>

<script define:vars={{ slug }}>
	// views api
	fetch("/api/blog/postViews", {
		method: "PUT",
		body: JSON.stringify({ slug }),
	}).then(async (res) => {
		const el = document.querySelector(`[data-post-views="${slug}"]`)
		if (el) el.textContent = (await res.text())?.toString().padStart(6, "0")
	})
</script>
