---
import "../styles/post-card.scss"
import "../styles/search-box.scss"

import { Search as Lens } from "lucide-astro"

import Layout from "../layouts/Layout.astro"
import CommandKey from "../components/search/CommandKey.astro"
---

<Layout title="Mohammed's blog | Search">
	<section id="search" aria-label="Search Results">
		<div class="wrapper">
			<div class="search-head">
				<h1 class="search-head__title">üîç Search Results !</h1>
				<p class="search-head__sub-title" id="searchReadout"></p>

				<div class="search-box">
					<form id="search-form">
						<div class="search-box__container">
							<div class="search-icon">
								<Lens slot="prefix" size={12} aria-hidden />
							</div>

							<input
								type="text"
								name="search"
								id="search"
								spellcheck="false"
								autocomplete="off"
								placeholder="Search Posts"
							/>

							<div class="key">
								<CommandKey />
							</div>
						</div>
					</form>
				</div>
			</div>

			<ul class="search-posts" id="searchResults"></ul>

			<div class="search-footer"></div>
		</div>
	</section>
</Layout>

<style lang="scss">
	.search-head {
		width: 100%;
		text-align: center;
		margin-bottom: 1.5rem;
		.search-head__title {
			font-size: 1.875rem;
			line-height: 2.25rem;
			font-weight: 700;
		}
		.search-head__sub-title {
			margin-top: 0.75rem;
			color: var(--gray);
		}
	}

	.search-posts {
		display: grid;
		grid-template-columns: repeat(3, minmax(0, 1fr));
		gap: 1.5rem;

		@media all and (max-width: 768px) {
			grid-template-columns: repeat(1, minmax(0, 1fr));
		}
	}

	.search-footer {
		padding: 1.5rem 0;
	}
</style>

<script>
	// imports
	import DOMPurify from "dompurify"
	import Fuse from "fuse.js"

	// utils
	import { simplifyDate } from "../utils"

	let SEARCH_DATA

	let FUSE_INSTANCE

	const FUSE_OPTIONS = {
		includeScore: true,
		shouldSort: true,
		threshold: 0.5,
		keys: [
			{
				name: "title",
				weight: 1,
			},
			{
				name: "description",
				weight: 0.75,
			},
		],
	}

	const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#000000" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>
    #spinner {
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      100% {
        transform: rotate(360deg);
      }
    }
    </style></svg>`

	// selectors
	const search = document.querySelector<HTMLInputElement>("#search")
	const searchReadout =
		document.querySelector<HTMLParagraphElement>("#searchReadout")
	const resultsList =
		document.querySelector<HTMLUListElement>("#searchResults")

	// functions
	function updateDocumentTitle(search) {
		document.title = search ? `Search results for ‚Äú${search}‚Äù` : "Search"
	}

	function updateSearchReadout(search) {
		searchReadout!.textContent = search
			? `Search results for ‚Äú${search}‚Äù`
			: ""
	}

	function updateSearchPageURL(search) {
		const url = new URL(window.location.href)

		url.searchParams.set("q", search)

		window.history.replaceState(null, "", url)
	}

	function generateSearchList(results) {
		return results
			.map((r) => {
				const { title, pubDate, slug, description, image } = r.item
				return `
        		<li class="post-card">
					<a href="${slug}">
						${
							image &&
							image !== "" &&
							`
							<div class="post-card__thumbnail-container">
									<img src="${image}" alt="${title}" />
							</div>
							`
						}

						<div class="post-card__body">
							<h2 class="title">${title}</h2>

							<p class="body-text">
								${description}
							</p>

							<div class="white-space"></div>

							<div class="meta">
								<div class="date">
									<Calendar class="shrink-0" size={14} aria-hidden />
									<time datetime="${pubDate}">${simplifyDate(pubDate).simplifiedDate}</time>
								</div>

								<div class="read">
									<Clock4 class="shrink-0" size={14} aria-hidden />
									<span>5 Min Read</span>
								</div>
							</div>
						</div>
					</a>
				</li>
			`
			})
			.join(" ")
	}

	async function fetchSearchResults(search) {
		if (search.length === 0) return

		resultsList!.innerHTML = SPINNER

		if (!SEARCH_DATA) {
			try {
				const res = await fetch("/api/blog/search.json")

				if (!res.ok) {
					throw new Error("Something went wrong‚Ä¶please try again")
				}

				const data = await res.json()

				SEARCH_DATA = data
			} catch (e) {
				console.error(e)
			}
		}

		if (SEARCH_DATA && !FUSE_INSTANCE) {
			FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS)
		}

		if (!FUSE_INSTANCE) return

		const searchResult = FUSE_INSTANCE.search(search)

		resultsList!.innerHTML =
			searchResult.length > 0
				? generateSearchList(searchResult)
				: "No results found‚Ä¶"
	}

	// event listeners
	window.addEventListener("DOMContentLoaded", () => {
		const urlParams = DOMPurify.sanitize(
			new URLSearchParams(window.location.search).get("q")
		)

		fetchSearchResults(urlParams)
		updateDocumentTitle(urlParams)
		updateSearchReadout(urlParams)

		search!.focus()
		search!.value = urlParams
	})

	search!.addEventListener("input", () => {
		const searchTerm = DOMPurify.sanitize(search!.value)

		updateDocumentTitle(searchTerm)
		updateSearchReadout(searchTerm)
		fetchSearchResults(searchTerm)
		updateSearchPageURL(searchTerm)
	})
</script>
