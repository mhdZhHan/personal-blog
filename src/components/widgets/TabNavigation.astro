---
interface Props {
	routes: string[]
	defaultActiveIndex?: number
}

const { routes, defaultActiveIndex = 0 } = Astro.props
---

<div class="tabs-container">
	<div class="tab-buttons">
		{
			routes.map((route, index) => (
				<button
					class={`tab-button ${index === defaultActiveIndex ? "active" : ""}`}
					data-index={index}
				>
					{route}
				</button>
			))
		}
	</div>
	<div class="tab-content">
		<slot />
	</div>
</div>

<script>
	const tabButtons: NodeListOf<HTMLButtonElement> =
		document.querySelectorAll(".tab-button")
	const tabContents: NodeListOf<Element> =
		document.querySelectorAll(".tab-content > *")

	function setActiveTab(index: number): void {
		tabButtons.forEach((button: HTMLButtonElement, i: number) => {
			button.classList.toggle("active", i === index)
		})

		tabContents.forEach((content: Element, i: number) => {
			;(content as HTMLElement).style.display =
				i === index ? "block" : "none"
		})
	}

	tabButtons.forEach((button: HTMLButtonElement, index: number) => {
		button.addEventListener("click", () => setActiveTab(index))
	})

	// Initial active tab `0`
	setActiveTab(0)
</script>

<style>
	.tab-buttons {
		border-bottom: 1px solid var(--border-color);
	}
	.tab-button {
		display: inline-block;
		padding: 0.4rem 1rem;
		border: none;
		background: none;
		cursor: pointer;
		font-weight: bold;
		color: var(--text);
	}
	.tab-button.active {
		border-bottom: 2px solid var(--primary);
		color: var(--title);
	}
	.tab-content {
		margin-top: 1rem;
	}
	.tab-content > :global(*) {
		display: none;
	}
	.tab-content > :global(*:first-child) {
		display: block;
	}
</style>
