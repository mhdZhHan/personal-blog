---
export type Props = {
    pageHeadings: Array<{ depth: number; text: string; slug: string }>
};

const { pageHeadings } = Astro.props
---

<div id="toc">
    <details>
        <summary accesskey="c" title="(Alt + c)">On this page</summary>
        <div class="inner">
            <ul>
                {
                    pageHeadings.map((h) => {
                        return (
                            <li>
                                {" "}
                                <a href={`#${h.slug}`}>{h.text}</a>
                            </li>
                        );
                    })
                }
            </ul>
        </div>
    </details>
</div>

<style lang="scss">
    #toc {
        padding: 0.6rem;
        margin: 2.5rem 0.2rem;
        background: var(--tertiary);
        border: 1px solid var(--border-color);
        border-radius: 0.4rem;

        summary {
            cursor: zoom-out;
            margin-inline-start: 2rem;
        }

        .inner {
            margin: 0 2rem;
            padding: 1rem 2rem;

            ul {
                // list-style: none;
                list-style: disc;
                line-height: 1.8;
                li {
                    a {
                        color: var(--title-text);
                        font-size: 18px;
                        word-break: break-word;
                        &.active {
                            color: var(--primary);
                            font-weight: 600;
                        }
                    }
                }
            }
        }
    }
</style>

<script>
    const setCurrent: IntersectionObserverCallback = (entries) => {
        for (let entry of entries) {
            const { id } = entry.target

            const tocHeadingEl = document.querySelector(
                `#toc a[href="#${id}"]`
            )

            if (!tocHeadingEl) return

            if (entry.isIntersecting) {
                document
                    .querySelectorAll("#toc a")
                    .forEach((e) => e.classList.remove("active"))
                tocHeadingEl.classList.add("active")
            }
        }
    };

    const observerOption: IntersectionObserverInit = {
        rootMargin: "0px 0px -66%",
        threshold: 1,
    }
    const headingObserver = new IntersectionObserver(
        setCurrent,
        observerOption
    )
    document
        .querySelectorAll(".blog-post-body__content :is(h1,h2,h3,h4)")
        .forEach((heading) => headingObserver.observe(heading))
</script>
