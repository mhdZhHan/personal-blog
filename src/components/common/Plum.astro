<div class="canvas-container">
	<canvas id="canvas" width="400" height="400"></canvas>
</div>

<style>
	.canvas-container {
		position: fixed;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		pointer-events: none;
		z-index: -1;

		mask-image: radial-gradient(circle, transparent, black);
		-webkit-mask-image: radial-gradient(circle, transparent, black);
	}
</style>

<script is:inline>
	window.addEventListener("DOMContentLoaded", () => {
		const canvas = document.getElementById("canvas")
		const ctx = canvas.getContext("2d")

		const r180 = Math.PI
		const r90 = Math.PI / 2
		const r15 = Math.PI / 12
		const color = "#88888825"

		const { random } = Math
		const size = {
			width: window.innerWidth,
			height: window.innerHeight,
		}

		const MIN_BRANCH = 30
		const len = 6
		let stopped = false
		let animationId

		function initCanvas(canvas, width = 400, height = 400, _dpi) {
			const ctx = canvas.getContext("2d")

			const dpr = window.devicePixelRatio || 1
			const bsr =
				ctx.webkitBackingStorePixelRatio ||
				ctx.mozBackingStorePixelRatio ||
				ctx.msBackingStorePixelRatio ||
				ctx.oBackingStorePixelRatio ||
				ctx.backingStorePixelRatio ||
				1

			const dpi = _dpi || dpr / bsr

			canvas.style.width = `${width}px`
			canvas.style.height = `${height}px`
			canvas.width = dpi * width
			canvas.height = dpi * height
			ctx.scale(dpi, dpi)

			return { ctx, dpi }
		}

		function polar2cart(x = 0, y = 0, r = 0, theta = 0) {
			const dx = r * Math.cos(theta)
			const dy = r * Math.sin(theta)
			return [x + dx, y + dy]
		}

		function step(x, y, rad, counter) {
			const length = random() * len
			counter.value += 1

			const [nx, ny] = polar2cart(x, y, length, rad)

			ctx.beginPath()
			ctx.moveTo(x, y)
			ctx.lineTo(nx, ny)
			ctx.stroke()

			const rad1 = rad + random() * r15
			const rad2 = rad - random() * r15

			if (
				nx < -100 ||
				nx > size.width + 100 ||
				ny < -100 ||
				ny > size.height + 100
			)
				return

			const rate = counter.value <= MIN_BRANCH ? 0.8 : 0.5

			if (random() < rate) steps.push(() => step(nx, ny, rad1, counter))

			if (random() < rate) steps.push(() => step(nx, ny, rad2, counter))
		}

		function frame() {
			if (stopped) return

			prevSteps = steps
			steps = []
			lastTime = performance.now()

			if (!prevSteps.length) {
				stopped = true
				return
			}

			prevSteps.forEach((i) => {
				if (random() < 0.5) steps.push(i)
				else i()
			})

			animationId = requestAnimationFrame(frame)
		}

		function start() {
			if (!canvas) return
			const { ctx } = initCanvas(canvas, size.width, size.height)
			const { width, height } = canvas

			if (animationId) cancelAnimationFrame(animationId)

			ctx.clearRect(0, 0, width, height)
			ctx.lineWidth = 1
			ctx.strokeStyle = color
			prevSteps = []
			steps = [
				() => step(random() * size.width, -5, r90, { value: 0 }),
				() =>
					step(random() * size.width, size.height + 5, -r90, {
						value: 0,
					}),
				() => step(-5, random() * size.height, 0, { value: 0 }),
				() =>
					step(size.width + 5, random() * size.height, r180, {
						value: 0,
					}),
			]
			if (size.width < 500) steps = steps.slice(0, 2)

			stopped = false
			frame()
		}

		start()
	})
</script>
