---
import {
	Home,
	Bell,
	Lightbulb,
	Camera,
	Moon,
	Github,
	Mail,
	Sun,
	ChevronLeft,
} from "lucide-astro"

import type { LucideIconComponent } from "src/types/LucideIcon.type"

interface DockItem {
	name: string
	icon: LucideIconComponent
}

const dockItems: (DockItem | { separator: true })[] = [
	{ name: "Home", icon: Home },
	{ name: "Notifications", icon: Bell },
	{ name: "Ideas", icon: Lightbulb },
	{ name: "Camera", icon: Camera },
	{ separator: true },
	{ name: "Profile", icon: Moon },
	{ name: "GitHub", icon: Github },
	{ name: "Mail", icon: Mail },
	{ separator: true },
	{ name: "Theme", icon: Sun },
	{ name: "Back", icon: ChevronLeft },
]
---

<div class="dock-container">
	<div class="dock">
		{
			dockItems.map((item) =>
				"separator" in item ? (
					<div class="separator" />
				) : (
					<div class="dock-item">
						<item.icon
							size={24}
							color="#ffffff"
							strokeWidth={1.5}
						/>
						<span class="tooltip">{item.name}</span>
					</div>
				)
			)
		}
	</div>
</div>

<style>
	@keyframes dockSlideUp {
		from {
			bottom: -100px;
			opacity: 0;
		}
		to {
			bottom: 20px;
			opacity: 1;
		}
	}

	.dock-container {
		--bg: #0c0c0c;
		--border: #303030;
		--color: #7e7e7e;

		width: max-content;
		margin: 0 auto;
		padding: 1em 0.5em;
		transform-origin: center;

		display: flex;
		justify-content: center;

		background: var(--bg);
		border: 1px solid var(--border);
		border-radius: 40px;

		position: fixed;
		bottom: 20px;
		left: 50%;
		transform: translateX(-50%);
		animation: dockSlideUp 0.5s ease-out forwards;
	}

	.dock {
		display: flex;
		justify-content: space-around;
	}

	.dock-item {
		width: 60px;
		height: 60px;
		border-radius: 30px;
		margin: 0 10px;
		background: var(--bg);
		color: var(--color);
		border: 1px solid var(--border);

		display: flex;
		align-items: center;
		justify-content: center;
		transition: 700ms cubic-bezier(0.075, 0.82, 0.165, 1);
		transform-origin: bottom;
	}

	.separator {
		width: 1px;
		height: 100%;
		background-color: rgba(255, 255, 255, 0.2);
		margin: 0 4px;
	}

	.tooltip {
		position: absolute;
		top: -35px;
		background: rgba(0, 0, 0, 0.8);
		color: white;
		padding: 4px 8px;
		border-radius: 4px;
		font-size: 12px;
		opacity: 0;
		transition: opacity 0.3s ease;
		pointer-events: none;
		white-space: nowrap;
	}

	.dock-item:hover .tooltip {
		opacity: 1;
	}
</style>

<script>
	document.addEventListener("astro:page-load", () => {
		// Select the dock and its items
		const dock = document.querySelector(".dock") as HTMLElement
		const dockItems = document.querySelectorAll(
			".dock-item"
		) as NodeListOf<HTMLElement>

		//  constants for scaling and margins
		const DEFAULT_ITEM_SCALE = 1
		const HOVER_ITEM_SCALE = 2.5
		const NEIGHBOR_ITEM_SCALE = 2
		const DEFAULT_MARGIN = "10px"
		const EXPAND_MARGIN = "40px"

		// Extend HTMLElement to include custom properties
		interface ExtendedHTMLElement extends HTMLElement {
			isHovered?: boolean
			isNeighbor?: boolean
		}

		// Function to update the scale and margin of dock items
		const updateDockItems = () => {
			dockItems.forEach((item) => {
				const extendedItem = item as ExtendedHTMLElement
				let scale = DEFAULT_ITEM_SCALE
				let margin = DEFAULT_MARGIN

				// Apply larger scale and margin for hovered and neighboring items
				if (extendedItem.isHovered) {
					scale = HOVER_ITEM_SCALE
					margin = EXPAND_MARGIN
				} else if (extendedItem.isNeighbor) {
					scale = NEIGHBOR_ITEM_SCALE
					margin = EXPAND_MARGIN
				}

				// Apply the calculated scale and margin
				extendedItem.style.transform = `scale(${scale})`
				extendedItem.style.margin = `0 ${margin}`
			})
		}

		// Add mousemove event listener to each dock item
		dockItems.forEach((item) => {
			item.addEventListener("mousemove", () => {
				dockItems.forEach((otherItem, otherIndex) => {
					const extendedOtherItem = otherItem as ExtendedHTMLElement
					// Set hovered state
					extendedOtherItem.isHovered = otherItem === item

					// Set neighbor state (items directly next to the hovered item)
					extendedOtherItem.isNeighbor =
						Math.abs(
							Array.from(dockItems).indexOf(otherItem) -
								Array.from(dockItems).indexOf(item)
						) === 1
				})
				updateDockItems()
			})
		})

		// Reset scales when mouse leaves the dock
		dock.addEventListener("mouseleave", () => {
			dockItems.forEach((item) => {
				const extendedItem = item as ExtendedHTMLElement
				extendedItem.isHovered = false
				extendedItem.isNeighbor = false
			})
			updateDockItems()
		})
	})
</script>
