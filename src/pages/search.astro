---
import "../styles/post-card.scss"
import "../styles/search-box.scss"

import { Search } from "lucide-astro"

import Layout from "../layouts/Layout.astro"
import CommandKey from "../components/search/CommandKey.astro"
---

<Layout title="Mohammed's blog | Search">
	<section id="search" aria-label="Search Results">
		<div class="wrapper">
			<div class="search-head">
				<h1 class="search-head__title">üîç Search Results !</h1>
				<p class="search-head__sub-title" id="searchReadout"></p>

				<div class="search-box">
					<form id="search-form">
						<div class="search-box__container">
							<div class="search-icon">
								<Search slot="prefix" size={12} aria-hidden />
							</div>

							<input
								type="text"
								name="search"
								id="search"
								data-post-filter-search=""
								spellcheck="false"
								autocomplete="off"
								placeholder="Search Posts"
							/>

							<div class="key">
								<CommandKey />
							</div>
						</div>
					</form>
				</div>
			</div>

			<ul class="search-posts" id="searchResults"></ul>

			<div class="search-footer"></div>
		</div>
	</section>
</Layout>

<style lang="scss">
	.search-head {
		width: 100%;
		text-align: center;
		margin-bottom: 1.5rem;
		.search-head__title {
			font-size: 1.875rem;
			line-height: 2.25rem;
			font-weight: 700;
		}
		.search-head__sub-title {
			margin-top: 0.75rem;
			color: var(--gray);
		}
	}

	.search-posts {
		display: grid;
		grid-template-columns: repeat(3, minmax(0, 1fr));
		gap: 1.5rem;

		@media all and (max-width: 768px) {
			grid-template-columns: repeat(1, minmax(0, 1fr));
		}
	}

	.search-footer {
		padding: 1.5rem 0;
	}
</style>

<script>
	// imports
	import DOMPurify from "dompurify"
	import Fuse from "fuse.js"

	// utils
	import { simplifyDate } from "../utils"

	let SEARCH_DATA

	let FUSE_INSTANCE

	const FUSE_OPTIONS = {
		includeScore: true,
		shouldSort: true,
		threshold: 0.5,
		keys: [
			{
				name: "title",
				weight: 1,
			},
			{
				name: "description",
				weight: 0.75,
			},
		],
	}

	const SPINNER = `
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="32"
            height="32"
            fill="#fff"
            viewBox="0 0 256 256"
            id="spinner"
        >
            <path d="M140,32V64a12,12,0,0,1-24,0V32a12,12,0,0,1,24,0Zm33.25,62.75a12,12,0,0,0,8.49-3.52L204.37,68.6a12,12,0,0,0-17-17L164.77,74.26a12,12,0,0,0,8.48,20.49ZM224,116H192a12,12,0,0,0,0,24h32a12,12,0,0,0,0-24Zm-42.26,48.77a12,12,0,1,0-17,17l22.63,22.63a12,12,0,0,0,17-17ZM128,180a12,12,0,0,0-12,12v32a12,12,0,0,0,24,0V192A12,12,0,0,0,128,180ZM74.26,164.77,51.63,187.4a12,12,0,0,0,17,17l22.63-22.63a12,12,0,1,0-17-17ZM76,128a12,12,0,0,0-12-12H32a12,12,0,0,0,0,24H64A12,12,0,0,0,76,128ZM68.6,51.63a12,12,0,1,0-17,17L74.26,91.23a12,12,0,0,0,17-17Z"></path>
            <style>
                #spinner {
                    animation: spin 1s linear infinite;
                }
                @keyframes spin {
                    100% {
                        transform: rotate(360deg);
                    }
                }
            </style>
        </svg>
    `

	// selectors
	const search = document.querySelector<HTMLInputElement>("#search")
	const searchReadout =
		document.querySelector<HTMLParagraphElement>("#searchReadout")
	const resultsList =
		document.querySelector<HTMLUListElement>("#searchResults")

	// functions
	const updateDocumentTitle = (search) => {
		document.title = search
			? `Search results for "${search}"`
			: `Search the Blog`
	}

	const updateSearchReadout = (search) => {
		searchReadout!.textContent = search
			? `Search results for ‚Äú${search}‚Äù`
			: ""
	}

	function updateSearchPageUrl(search) {
		const url = new URL(window.location.href)
		url.searchParams.set("q", search)
		window.history.replaceState(null, "", url)
	}

	function generateSearchList(results) {
		return results
			.map((r) => {
				const { title, pubDate, slug, description, image } = r.item

				return `

			<li class="post-card">
				<a href="${slug}">
					${
						image &&
						image !== "" &&
						`
						<div class="post-card__thumbnail-container">
								<img src="${image}" alt="${title}" />
						</div>
						`
					}

					<div class="post-card__body">
						<h2 class="title">${title}</h2>

						<p class="body-text">
							${description}
						</p>

						<div class="white-space"></div>

						<div class="meta">
							<div class="date">
								<Calendar class="shrink-0" size={14} aria-hidden />
								<time datetime="${pubDate}">${simplifyDate(pubDate).simplifiedDate}</time>
							</div>

							<div class="read">
								<Clock4 class="shrink-0" size={14} aria-hidden />
								<span>5 Min Read</span>
							</div>
						</div>
					</div>
				</a>
			</li>
            `
			})
			.join(" ")
	}

	async function fetchSearchResults(search) {
		if (search.length === 0) return

		// resultsList.innerHTML = SPINNER

		if (!SEARCH_DATA) {
			try {
				const response = await fetch("/api/blog/search.json")

				if (!response.ok) throw new Error("Something went wrong...")

				SEARCH_DATA = await response.json()
			} catch (error) {
				console.error(error)
			}
		}

		if (SEARCH_DATA && !FUSE_INSTANCE) {
			FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS)
		}

		if (!FUSE_INSTANCE) return
		const searchResult = FUSE_INSTANCE.search(search)

		resultsList!.innerHTML =
			searchResult.length > 0
				? generateSearchList(searchResult)
				: "No blogs found‚Ä¶"
	}

	// event listeners
	window.addEventListener("DOMContentLoaded", () => {
		const urlParams = DOMPurify.sanitize(
			new URLSearchParams(window.location.search).get("q")
		)

		fetchSearchResults(urlParams)
		updateDocumentTitle(urlParams)
		updateSearchReadout(urlParams)

		search!.value = urlParams
		search!.focus()
	})

	search!.addEventListener("input", () => {
		const searchTerm = DOMPurify.sanitize(search!.value)

		updateDocumentTitle(searchTerm)
		updateSearchReadout(searchTerm)
		fetchSearchResults(searchTerm)
		updateSearchPageUrl(searchTerm)

		search!.value = searchTerm
		search!.focus()
	})
</script>
