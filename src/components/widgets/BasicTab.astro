---
interface Tab {
	name: string
	content?: string
}

interface Props {
	tabs: Tab[]
}

const { tabs } = Astro.props
---

<div class="tabs-container">
	<div class="tab-buttons">
		{
			tabs.map((tab, index) => (
				<button
					class="tab-button"
					aria-label={`Tab ${tab.name}`}
					data-index={index}
				>
					{tab.name}
				</button>
			))
		}
	</div>
	<div class="tab-content">
		{
			tabs.map((tab, index) => (
				<div class="tab-pane" data-index={index}>
					{tab.content}
				</div>
			))
		}
	</div>
</div>

<style>
	.tab-buttons {
		display: flex;
		border-bottom: 1px solid var(--border-color);
	}

	.tab-button {
		padding: 10px 20px;
		border: none;
		background: none;
		cursor: pointer;
	}

	.tab-button.active {
		border-bottom: 2px solid var(--primary);
		font-weight: bold;
		color: var(--title);
	}

	.tab-content {
		padding: 20px 0;
	}

	.tab-pane {
		display: none;
	}

	.tab-pane.active {
		display: block;
	}
</style>

<script>
	let activeTab = 0

	function setActiveTab(index: number) {
		const buttons = document.querySelectorAll(".tab-button")
		const panes = document.querySelectorAll(".tab-pane")

		buttons.forEach((button, i) => {
			if (i === index) {
				button.classList.add("active")
			} else {
				button.classList.remove("active")
			}
		})

		panes.forEach((pane, i) => {
			if (i === index) {
				pane.classList.add("active")
			} else {
				pane.classList.remove("active")
			}
		})

		activeTab = index
	}

	document.querySelectorAll(".tab-button").forEach((button) => {
		button.addEventListener("click", () => {
			const index = parseInt(button.getAttribute("data-index") || "0", 10)
			setActiveTab(index)
		})
	})

	// First tab as active by default
	setActiveTab(0)
</script>
